---
- hosts: localhost
  module_defaults:
    apt:
      force_apt_get: yes
  become: yes
  vars:
  - go_version_expected: "go version go{{ packages.go.version }} linux/amd64"
  - protoc_version_expected: "libprotoc {{ packages.protoc.version }}"

  tasks:
  - name: "settings | download cache folder"
    file:
      path: "{{ dlcache }}"
      state: directory
      mode: 0755
    tags:
    - always

  - name: "settings | locale.gen"
    locale_gen:
      name: "{{ item }}"
      state: present
    with_items:
    - en_US.UTF-8
    - fr_FR.UTF-8
    tags:
    - always
    - locale

  - name: "settings | locale"
    template:
      src: etc/default/locale.j2
      dest: /etc/default/locale
      mode: 0644
    tags:
    - always
    - locale

  - name: "settings | auto-start folder"
    file:
      path: "{{ homedir }}/.config/autostart"
      state: directory
      owner: "{{ userid }}"
      group: "{{ groupid }}"
      mode: 0700

  - name: "fonts | Cascadia Code :: installation"
    win_chocolatey:
      name: cascadiacode
      state: latest
    when: wsl == "1"
    tags:
    - fonts
    - cascadiacode

  - name: "fonts | Ubuntu Mono :: installation"
    apt:
      name: ubuntu-mono
      state: latest
    when: wsl == "0"
    tags:
    - fonts
    - ubuntu-mono

  - name: "fonts | MesloLGS NF :: folder"
    file:
      path: /usr/share/fonts/truetype/meslo-lgs-nf
      state: directory
      mode: '0755'
    when: wsl == "0"
    tags:
    - fonts
    - meslo

  - name: "fonts | MesloLGS NF :: installation"
    get_url:
      url: https://github.com/romkatv/powerlevel10k-media/raw/master/{{ item.src }}.ttf
      dest: /usr/share/fonts/truetype/meslo-lgs-nf/{{ item.dst }}.ttf
      mode: '0644'
    with_items:
    - { src: "MesloLGS%20NF%20Regular", dst: "meslo-lgs-nf-regular" }
    - { src: "MesloLGS%20NF%20Bold", dst: "meslo-lgs-nf-bold" }
    - { src: "MesloLGS%20NF%20Italic", dst: "meslo-lgs-nf-italic" }
    - { src: "MesloLGS%20NF%20Bold%20Italic", dst: "meslo-lgs-nf-bold-italic" }
    when: wsl == "0"
    tags:
    - fonts
    - meslo

  - name: "terminal | Windows Terminal :: installation"
    win_chocolatey:
      name: microsoft-windows-terminal
      state: latest
    when: wsl == "1"
    tags:
    - terminal
    - windows-terminal

  - name: "terminal | Gnome Terminal :: installation"
    apt:
      name: gnome-terminal
      state: latest
    when: wsl == "0"
    tags:
    - terminal
    - gnome-terminal

  - name: "terminal | Gnome Terminal :: configuration"
    become: "{{ username }}"
    dconf:
      key: "/org/gnome/terminal/legacy/profiles:/:{{ gnome_terminal_default_profile }}/{{ item.key }}"
      state: present
      value: "{{ item.value }}"
    with_items:
    - { key: "default-size-columns", value: "120" }
    - { key: "default-size-rows", value: "60" }
    - { key: "use-theme-colors", value: "false" }
    - { key: "foreground-color", value: "'{{ terminal.foreground.color }}'" }
    - { key: "custom-background-color", value: "'{{ terminal.background.color }}'" }
    - { key: "background-color", value: "'{{ terminal.background.color }}'" }
    - { key: "palette", value: "{{ terminal.palette }}" }
    - { key: "use-custom-command", value: "true" }
    - { key: "custom-command", value: "'/usr/bin/zsh'" }
    - { key: "use-system-font", value: "false" }
    - { key: "font", value: "'Ubuntu Mono 12'" }
    - { key: "cursor-foreground-color", value: "'{{ terminal.cursor.color }}'" }
    - { key: "cursor-foreground-color", value: "'{{ terminal.cursor.color }}'" }
    - { key: "audible-bell", value: "false" }
    - { key: "use-transparent-background", value: "true" }
    - { key: "use-theme-transparency", value: "false" }
    - { key: "background-transparency-percent", value: "{{ 100 - terminal.background.transparency }}" }
    when: wsl == "0"
    tags:
    - terminal
    - gnome-terminal

  - name: "terminal | Terminator :: installation"
    apt:
      name: terminator
      state: latest
    when: wsl == "0"
    tags:
    - terminal
    - terminator

  - name: "terminal | Terminator :: configuration folder"
    file:
      path: "{{ homedir }}/.config/terminator"
      state: directory
      owner: "{{ userid }}"
      group: "{{ groupid }}"
      mode: '0700'
    when: wsl == "0"
    tags:
    - terminal
    - terminator

  - name: "terminal | Terminator :: configuration"
    template:
      src: home/.config/terminator/config.j2
      dest: "{{ homedir }}/.config/terminator/config"
      owner: "{{ userid }}"
      group: "{{ groupid }}"
      mode: 0600
    when: wsl == "0"
    tags:
    - terminal
    - terminator

  - name: "terminal | Terminator :: favorite"
    block:

    - name: "terminal | Terminator :: favorite [1/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        state: read
      become: "{{ username }}"
      register: favorites
      changed_when: false

    - name: "terminal | Terminator :: favorite [2/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        value: "{{ favorites.value | list_insert_after('terminator.desktop', 'org.gnome.Terminal.desktop') }}"
      become: "{{ username }}"

    when: wsl == "0"
    tags:
    - terminal
    - terminator

  - name: "terminal | Tilda :: installation"
    apt:
      name: tilda
      state: latest
    tags:
    - terminal
    - tilda

  - name: "terminal | Tilda :: version"
    shell: "tilda --version | head -1 | awk '{print $2}'"
    register: tilda_version
    changed_when: false
    tags:
    - terminal
    - tilda

  - name: "terminal | Tilda :: folder"
    file:
      path: "{{ homedir }}/.config/tilda"
      state: directory
      owner: "{{ userid }}"
      group: "{{ groupid }}"
      mode: '0700'
    tags:
    - terminal
    - tilda

  - name: "terminal | Tilda :: configuration"
    template:
      src: home/.config/tilda/{{ item }}.j2
      dest: "{{ homedir }}/.config/tilda/{{ item }}"
      owner: "{{ userid }}"
      group: "{{ groupid }}"
      mode: 0600
    with_items:
    - config_0
    - style.css
    tags:
    - terminal
    - tilda

  - name: "terminal | Tilda :: auto-start"
    template:
      src: home/.config/autostart/tilda.desktop.j2
      dest: "{{ homedir }}/.config/autostart/tilda.desktop"
      owner: "{{ userid }}"
      group: "{{ groupid }}"
      mode: 0600
    tags:
    - terminal
    - tilda

  - name: "scm | Git :: repository"
    apt_repository:
      repo: ppa:git-core/ppa
      filename: git
      mode: 0644
    tags:
    - scm
    - git

  - name: "scm | Git :: installation"
    apt:
      name: ['git', 'git-flow']
      state: latest
    tags:
    - scm
    - git

  - name: "scm | Git :: configuration"
    template:
      src: home/.gitconfig.j2
      dest: "{{ homedir }}/.gitconfig"
      owner: "{{ userid }}"
      group: "{{ groupid }}"
      mode: 0600
    tags:
    - scm
    - git

  - name: "container | Docker :: repository key"
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
    tags:
    - container
    - docker

  - name: "container | Docker :: repository"
    apt_repository:
      repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
      filename: docker
      mode: 0644
    tags:
    - container
    - docker

  - name: "container | Docker :: cleanup"
    apt:
      name: ['docker', 'docker-engine', 'docker.io']
      state: absent
    tags:
    - container
    - docker

  - name: "container | Docker :: installation"
    apt:
      name: ['docker-ce', 'docker-compose']
      state: latest
    tags:
    - container
    - docker

  - name: "container | Docker :: user rights"
    user:
      name: "{{ username }}"
      groups: "docker"
      append: "yes"
    tags:
    - container
    - docker

  - name: "kubernetes | kubectl :: repository key"
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present
    tags:
    - kubernetes
    - kubectl

  - name: "kubernetes | kubectl :: repository"
    apt_repository:
      repo: "deb [arch=amd64] https://apt.kubernetes.io/ kubernetes-xenial main"
      state: present
      filename: kubernetes
      mode: 0644
    tags:
    - kubernetes
    - kubectl

  - name: "kubernetes | kubectl :: installation"
    apt:
      name: kubectl
      state: latest
    tags:
    - kubernetes
    - kubectl

  - name: "kubernetes | k3d :: installation"
    get_url:
      url: https://github.com/{{ packages.k3d.repo }}/releases/download/v{{ packages.k3d.version }}/k3d-{{ packages.k3d.platform }}
      dest: /usr/local/bin/k3d
      owner: root
      group: root
      mode: "0755"
      checksum: sha256:{{ packages.k3d.checksum }}
    tags:
    - kubernetes
    - k3d

  - name: "kubernetes | k9s :: check"
    command: k9s version --short
    ignore_errors: yes
    register: k9s_version
    changed_when: false
    tags:
    - kubernetes
    - k9s

  - name: "kubernetes | k9s :: download"
    get_url:
      url: https://github.com/{{ packages.k9s.repo }}/releases/download/v{{ packages.k9s.version }}/k9s_{{ packages.k9s.platform }}.tar.gz
      dest: "{{ dlcache }}/k9s-{{ packages.k9s.version }}.tar.gz"
      sha256sum: "{{ packages.k9s.checksum }}"
    when: k9s_version is failed or packages.k9s.version not in k9s_version.stdout_lines[0]
    tags:
    - kubernetes
    - k9s

  - name: "kubernetes | k9s :: unarchive"
    unarchive:
      src: "{{ dlcache }}/k9s-{{ packages.k9s.version }}.tar.gz"
      dest: /usr/local/bin
      copy: no
      mode: 0755
      exclude:
      - LICENSE
      - README.md
    when: k9s_version is failed or packages.k9s.version not in k9s_version.stdout_lines[0]
    tags:
    - kubernetes
    - k9s

  - name: "kubernetes | kustomize :: check"
    command: kustomize version
    ignore_errors: yes
    register: kustomize_version
    changed_when: false
    tags:
    - kubernetes
    - kustomize

  - name: "kubernetes | kustomize :: download"
    get_url:
      url: https://github.com/{{ packages.kustomize.repo }}/releases/download/kustomize%2Fv{{ packages.kustomize.version }}/kustomize_v{{ packages.kustomize.version }}_{{ packages.kustomize.platform }}.tar.gz
      dest: "{{ dlcache }}/kustomize-{{ packages.kustomize.version }}.tar.gz"
      sha256sum: "{{ packages.kustomize.checksum }}"
    when: kustomize_version is failed or packages.kustomize.version not in kustomize_version.stdout_lines[0]
    tags:
    - kubernetes
    - kustomize

  - name: "kubernetes | kustomize :: unarchive"
    unarchive:
      src: "{{ dlcache }}/kustomize-{{ packages.kustomize.version }}.tar.gz"
      dest: /usr/local/bin
      copy: no
      mode: 0755
    when: kustomize_version is failed or packages.kustomize.version not in kustomize_version.stdout_lines[0]
    tags:
    - kubernetes
    - kustomize

  - name: "kubernetes | SOPS :: installation"
    get_url:
      url: https://github.com/{{ packages.sops.repo }}/releases/download/v{{ packages.sops.version }}/sops-v{{ packages.sops.version }}.linux
      dest: /usr/local/bin/sops
      owner: root
      group: root
      mode: "0755"
      checksum: sha256:{{ packages.sops.checksum }}
    tags:
    - kubernetes
    - sops

  - name: "kubernetes | keycloak :: download"
    get_url:
      url: https://downloads.jboss.org/keycloak/{{ packages.keycloak.version }}/keycloak-{{ packages.keycloak.version }}.tar.gz
      dest: "{{ dlcache }}/keycloak-{{ packages.keycloak.version }}.tar.gz"
      checksum: sha1:{{ packages.keycloak.checksum }}
    tags:
    - kubernetes
    - keycloak

  - name: "kubernetes | keycloak :: folder"
    file:
      path: "/usr/local/keycloak"
      mode: "0755"
      state: directory
    tags:
    - kubernetes
    - keycloak

  - name: "kubernetes | keycloak :: unarchive"
    unarchive:
      src: "{{ dlcache }}/keycloak-{{ packages.keycloak.version }}.tar.gz"
      dest: /usr/local/keycloak
      copy: no
      extra_opts:
      - --strip-components=1
    tags:
    - kubernetes
    - keycloak

  - name: "kubernetes | keycloak :: symlink"
    file:
      src: /usr/local/keycloak/bin/kcadm.sh
      dest: /usr/local/bin/kcadm
      state: link
    tags:
    - kubernetes
    - keycloak

  - name: "lang | Node :: repository key"
    apt_key:
      url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
      state: present
    tags:
    - lang
    - nodejs

  - name: "lang | Node :: repository"
    apt_repository:
      repo: "deb [arch=amd64] https://deb.nodesource.com/{{ packages.node.pkg_repo }} {{ ansible_distribution_release }} main"
      state: present
      filename: nodesource
      mode: 0644
    tags:
    - lang
    - nodejs

  - name: "lang | Node :: installation"
    apt:
      name: nodejs
      state: latest
    tags:
    - lang
    - nodejs

  - name: "lang | Node :: configuration"
    template:
      src: home/.npmrc.j2
      dest: "{{ homedir }}/.npmrc"
      owner: "{{ userid }}"
      group: "{{ groupid }}"
      mode: 0600
    tags:
    - lang
    - nodejs

  - name: "lang | Node :: repository key"
    apt_key:
      url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
      state: present
    tags:
    - lang
    - nodejs

  - name: "lang | Node :: repository"
    apt_repository:
      repo: "deb [arch=amd64] https://deb.nodesource.com/{{ packages.node.pkg_repo }} {{ ansible_distribution_release }} main"
      state: present
      filename: nodesource
      mode: 0644
    tags:
    - lang
    - nodejs

  - name: "lang | Node :: installation"
    apt:
      name: nodejs
      state: latest
    tags:
    - lang
    - nodejs

  - name: "lang | Node :: configuration"
    template:
      src: home/.npmrc.j2
      dest: "{{ homedir }}/.npmrc"
      owner: "{{ userid }}"
      group: "{{ groupid }}"
      mode: 0600
    tags:
    - lang
    - nodejs

  - name: "lang | Go :: check"
    command: /usr/local/go/bin/go version
    ignore_errors: yes
    register: go_version
    changed_when: false
    tags:
    - lang
    - go

  - name: "lang | Go :: download"
    get_url:
      url: https://dl.google.com/go/go{{ packages.go.version }}.linux-amd64.tar.gz
      dest: "{{ dlcache }}/go{{ packages.go.version }}.linux-amd64.tar.gz"
      checksum: sha256:{{ packages.go.checksum }}
    when: go_version is failed or go_version.stdout != go_version_expected
    tags:
    - lang
    - go

  - name: "lang | Go :: cleanup"
    file:
      path: /usr/local/go
      state: absent
    when: go_version is failed or go_version.stdout != go_version_expected
    tags:
    - lang
    - go

  - name: "lang | Go :: installation"
    unarchive:
      src: "{{ dlcache }}/go{{ packages.go.version }}.linux-amd64.tar.gz"
      dest: /usr/local
      copy: no
    when: go_version is failed or go_version.stdout != go_version_expected
    tags:
    - lang
    - go

  - name: "lang | Go :: configuration"
    template:
      src: etc/profile.d/{{ item }}.j2
      dest: /etc/profile.d/{{ item }}
      mode: 0644
    with_items:
    - go-bin.sh
    - go-path.sh
    tags:
    - lang
    - go

  - name: "lang | Protoc :: check"
    command: protoc --version
    ignore_errors: yes
    register: protoc_version
    changed_when: false
    tags:
    - lang
    - protoc

  - name: "lang | Protoc :: download"
    get_url:
      url: https://github.com/{{ packages.protoc.repo }}/releases/download/v{{ packages.protoc.version }}/protoc-{{ packages.protoc.version }}-linux-x86_64.zip
      dest: "{{ dlcache }}/protoc-{{ packages.protoc.version }}-linux-x86_64.zip"
    when: protoc_version is failed or protoc_version.stdout != protoc_version_expected
    tags:
    - lang
    - protoc

  - name: "lang | Protoc :: temporary extraction folder"
    tempfile:
      state: directory
    register: __protoc_tmp
    when: protoc_version is failed or protoc_version.stdout != protoc_version_expected
    tags:
    - lang
    - protoc

  - name: "lang | Protoc :: extraction"
    unarchive:
      src: "{{ dlcache }}/protoc-{{ packages.protoc.version }}-linux-x86_64.zip"
      dest: "{{ __protoc_tmp.path }}"
      copy: no
    when: protoc_version is failed or protoc_version.stdout != protoc_version_expected
    tags:
    - lang
    - protoc

  - name: "lang | Protoc :: installation (binaries)"
    copy:
      src: "{{ __protoc_tmp.path }}/bin/protoc"
      dest: "/usr/local/bin/protoc"
      mode: "0755"
      remote_src: yes
    when: protoc_version is failed or protoc_version.stdout != protoc_version_expected
    tags:
    - lang
    - protoc

  - name: "lang | Protoc :: installation (include folder)"
    file:
      path: "/usr/local/include"
      mode: "0755"
      state: directory
    when: protoc_version is failed or protoc_version.stdout != protoc_version_expected
    tags:
    - lang
    - protoc

  - name: "lang | Protoc :: installation (includes)"
    copy:
      src: "{{ __protoc_tmp.path }}/include/google/"
      dest: "/usr/local/include/google"
      mode: "0755"
      remote_src: True
    when: protoc_version is failed or protoc_version.stdout != protoc_version_expected
    tags:
    - lang
    - protoc

  - name: "editor | Code :: repository key"
    apt_key:
      url: https://packages.microsoft.com/keys/microsoft.asc
      state: present
    tags:
    - editor
    - vscode

  - name: "editor | Code :: repository"
    apt_repository:
      repo: "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
      state: present
      filename: vscode
      mode: 0644
    when: wsl == "0"
    tags:
    - editor
    - vscode

  - name: "editor | Code :: installation"
    apt:
      name: code
      state: latest
    when: wsl == "0"
    tags:
    - editor
    - vscode

  - name: "editor | Code :: configuration folder"
    file:
      path: "{{ homedir }}/.config/{{ item }}"
      owner: "{{ userid }}"
      group: "{{ groupid }}"
      state: directory
      mode: '0700'
    with_items:
    - "Code"
    - "Code/User"
    when: wsl == "0"
    tags:
    - editor
    - vscode

  - name: "editor | Code :: configuration"
    template:
      src: home/.config/Code/User/{{ item }}.j2
      dest: "{{ homedir }}/.config/Code/User/{{ item }}"
      owner: "{{ userid }}"
      group: "{{ groupid }}"
      mode: 0600
    with_items:
    - settings.json
    - keybindings.json
    when: wsl == "0"
    tags:
    - editor
    - vscode

  - name: "editor | Code :: extensions"
    shell: code --install-extension {{ item }}
    args:
      creates: "{{ homedir }}/.vscode/extensions/{{ item }}-*/package.json"
    become: "{{ username }}"
    with_items:
      - "alefragnani.bookmarks"
      - "coenraads.bracket-pair-colorizer"
      - "oderwat.indent-rainbow"
      - "editorconfig.editorconfig"
      - "searking.preview-vscode"
      - "pkief.material-icon-theme"
      - "ckolkman.vscode-postgres"
    when: wsl == "0"
    tags:
    - editor
    - vscode

  - name: "editor | Code :: favorite"
    block:

    - name: "editor | Code :: favorite [1/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        state: read
      become: "{{ username }}"
      register: favorites
      changed_when: false

    - name: "editor | Code :: favorite [2/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        value: "{{ favorites.value | list_insert_before('code.desktop', 'org.gnome.Terminal.desktop') }}"
      become: "{{ username }}"

    when: wsl == "0"
    tags:
    - editor
    - vscode

  - name: "editor | Vim :: installation"
    apt:
      name: vim
      state: latest
    tags:
    - editor
    - vim

  - name: "editor | Vim :: configuration"
    template:
      src: home/.vimrc.j2
      dest: "{{ homedir }}/.vimrc"
      owner: "{{ userid }}"
      group: "{{ groupid }}"
      mode: 0600
    tags:
    - editor
    - vim

  - name: "shell | Zsh :: installation"
    apt:
      name: zsh
      state: latest
    tags:
    - shell
    - zsh

  - name: "shell | Zsh :: configuration"
    template:
      src: home/.zshrc.j2
      dest: "{{ homedir }}/.zshrc"
      owner: "{{ userid }}"
      group: "{{ groupid }}"
      mode: 0600
    tags:
    - shell
    - zsh

  - name: "shell | Zsh :: theme"
    copy:
      src: home/.p10k.zsh
      dest: "{{ homedir }}/.p10k.zsh"
      owner: "{{ userid }}"
      group: "{{ groupid }}"
      mode: 0600
    tags:
    - shell
    - zsh

  - name: "utils | Misc :: installation"
    apt:
      name: [ 'figlet', 'lolcat', 'boxes', 'xclip', 'xsel', 'tree', 'jq', 'libnss3-tools' ]
      state: latest
    tags:
    - utils

  - name: "utils | Yq :: remove python version"
    pip:
      name: yq
      state: absent
      umask: "0022"
    tags:
    - utils
    - yq

  - name: "utils | Yq :: repository"
    apt_repository:
      repo: ppa:rmescandon/yq
      state: present
      filename: yq
      mode: 0644
    tags:
    - utils
    - yq

  - name: "utils | Yq :: installation"
    apt:
      name: yq
      state: latest
    tags:
    - utils
    - yq

  - name: "utils | Tmux :: installation"
    apt:
      name: tmux
      state: latest
    tags:
    - utils
    - tmux

  - name: "utils | Tmux :: configuration"
    template:
      src: home/.tmux.conf.j2
      dest: "{{ homedir }}/.tmux.conf"
      owner: "{{ userid }}"
      group: "{{ groupid }}"
      mode: 0600
    tags:
    - utils
    - tmux

  - name: "utils | Httpie :: remove os version"
    apt:
      name: httpie
      state: absent
    tags:
    - utils
    - httpie

  - name: "utils | Httpie :: check"
    command: http --version
    ignore_errors: yes
    register: httpie_version
    changed_when: false
    tags:
    - utils
    - httpie

  - name: "utils | Httpie :: installation"
    pip:
      name: https://github.com/jakubroztocil/httpie/archive/{{ packages.httpie.version }}.tar.gz
      executable: pip3
      extra_args: --upgrade
      umask: "0022"
      state: latest
    when: httpie_version is failed or httpie_version.stdout != packages.httpie.version
    tags:
    - utils
    - httpie

  - name: "utils | Insomnia :: repository key"
    apt_key:
      url: https://insomnia.rest/keys/debian-public.key.asc
      state: present
    tags:
    - utils
    - insomnia

  - name: "utils | Insomnia :: repository"
    apt_repository:
      repo: "deb [arch=amd64] https://dl.bintray.com/getinsomnia/Insomnia /"
      state: present
      filename: insomnia
      mode: 0644
    tags:
    - utils
    - insomnia

  - name: "utils | Insomnia :: installation"
    apt:
      name: insomnia
      state: latest
    tags:
    - utils
    - insomnia

  - name: "utils | Insomnia :: favorite"
    block:

    - name: "utils | Insomnia :: favorite [1/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        state: read
      become: "{{ username }}"
      register: favorites
      changed_when: false

    - name: "utils | Insomnia :: favorite [2/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        value: "{{ favorites.value | list_append('insomnia.desktop') }}"
      become: "{{ username }}"

    when: wsl == "0"
    tags:
    - utils
    - insomnia

  - name: "special | Variety :: installation"
    apt:
      name: variety
      state: latest
    when: wsl == "0"
    tags:
    - never
    - special
    - variety

  - name: "special | Variety :: Settings folder"
    file:
      path: "{{ homedir }}/.config/variety"
      state: directory
      owner: "{{ userid }}"
      group: "{{ groupid }}"
      mode: 0700
    when: wsl == "0"
    tags:
    - never
    - special
    - variety

  - name: "special | Variety :: Settings"
    template:
      src: home/.config/variety/{{ item }}.j2
      dest: "{{ homedir }}/.config/variety/{{ item }}"
      owner: "{{ userid }}"
      group: "{{ groupid }}"
      mode: 0600
    with_items:
    - ".firstrun"
    - "variety.conf"
    tags:
    - never
    - special
    - variety

  - name: "special | Variety :: auto-start"
    template:
      src: home/.config/autostart/variety.desktop.j2
      dest: "{{ homedir }}/.config/autostart/variety.desktop"
      owner: "{{ userid }}"
      group: "{{ groupid }}"
      mode: 0600
    tags:
    - never
    - special
    - variety

  - name: "misc | Chrome :: repository key"
    apt_key:
      url: https://dl.google.com/linux/linux_signing_key.pub
      state: present
    when: wsl == "0"
    tags:
    - misc
    - chrome

  - name: "misc | Chrome :: repository"
    apt_repository:
      repo: deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main
      state: present
      filename: "google-chrome"
      update_cache: "yes"
    when: wsl == "0"
    tags:
    - misc
    - chrome

  - name: "misc | Chrome :: installation"
    apt:
      name:
      - google-chrome-stable
      - chrome-gnome-shell
      state: latest
    when: wsl == "0"
    tags:
    - misc
    - chrome

  - name: "misc | Chrome :: favorite"
    block:

    - name: "misc | Chrome :: favorite [1/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        state: read
      become: "{{ username }}"
      register: favorites
      changed_when: false

    - name: "misc | Chrome :: favorite [2/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        value: "{{ favorites.value | list_insert_after('google-chrome.desktop', 'org.gnome.Nautilus.desktop') }}"
      become: "{{ username }}"

    when: wsl == "0"
    tags:
    - misc
    - chrome

  # If Play/Pause keyboard buttons do not work with Spotify if Chrome is started
  # chrome://flags/#hardware-media-key-handling to disable media key handler
  - name: "special | Spotify :: repository key"
    apt_key:
      url: https://download.spotify.com/debian/pubkey.gpg
      state: present
    when: wsl == "0"
    tags:
    - never
    - special
    - spotify

  - name: "special | Spotify :: repository"
    apt_repository:
      repo: deb [arch=amd64] http://repository.spotify.com stable non-free
      state: present
      filename: "spotify"
    when: wsl == "0"
    tags:
    - never
    - special
    - spotify

  - name: "special | Spotify :: installation"
    apt:
      name: spotify-client
      state: latest
    when: wsl == "0"
    tags:
    - never
    - special
    - spotify

  - name: "special | Spotify :: favorite"
    block:

    - name: "special | Spotify :: favorite [1/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        state: read
      become: "{{ username }}"
      register: favorites
      changed_when: false

    - name: "special | Spotify :: favorite [2/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        value: "{{ favorites.value | list_append('spotify.desktop') }}"
      become: "{{ username }}"

    when: wsl == "0"
    tags:
    - never
    - special
    - chrome

  - name: "special | Transmission :: folders"
    file:
      path: "{{ homedir }}/{{ item }}"
      state: directory
      owner: "{{ userid }}"
      group: "{{ groupid }}"
      mode: 0700
    with_items:
    - "Downloads"
    - "Downloads/000 A Traiter 000"
    - "Downloads/.transmission.work"
    - ".config/transmission"
    when: wsl == "0"
    tags:
    - never
    - special
    - transmission

  - name: "special | Transmission :: installation"
    apt:
      name: transmission-gtk
      state: latest
    when: wsl == "0"
    tags:
    - never
    - special
    - transmission

  - name: "special | Transmission :: settings"
    template:
      src: home/.config/transmission/settings.json.j2
      dest: "{{ homedir }}/.config/transmission/settings.json"
      mode: 0644
    tags:
    - never
    - special
    - transmission

  - name: "special | Transmission :: favorite"
    block:

    - name: "special | Transmission :: favorite [1/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        state: read
      become: "{{ username }}"
      register: favorites
      changed_when: false

    - name: "special | Transmission :: favorite [2/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        value: "{{ favorites.value | list_insert_after('transmission-gtk.desktop', 'firefox.desktop') }}"
      become: "{{ username }}"

    when: wsl == "0"
    tags:
    - never
    - special
    - transmission

  - name: "special | Flameshot :: installation"
    apt:
      name: flameshot
      state: latest
    when: wsl == "0"
    tags:
    - never
    - special
    - flameshot

  - name: "special | Flameshot :: favorite"
    block:

    - name: "special | Flameshot :: favorite [1/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        state: read
      become: "{{ username }}"
      register: favorites
      changed_when: false

    - name: "special | Flameshot :: favorite [2/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        value: "{{ favorites.value | list_insert_after('flameshot.desktop', 'spotify.desktop') }}"
      become: "{{ username }}"

    when: wsl == "0"
    tags:
    - never
    - special
    - flameshot

  - name: "special | Teamviewer :: repository key"
    apt_key:
      url: https://download.teamviewer.com/download/linux/signature/TeamViewer2017.asc
      state: present
    when: wsl == "0"
    tags:
    - never
    - special
    - teamviewer

  - name: "special | Teamviewer :: repository"
    apt_repository:
      repo: deb http://linux.teamviewer.com/deb stable main
      state: present
      filename: "teamviewer"
    when: wsl == "0"
    tags:
    - never
    - special
    - teamviewer

  - name: "special | Teamviewer :: installation"
    apt:
      name: teamviewer
      state: latest
    when: wsl == "0"
    tags:
    - never
    - special
    - teamviewer

  - name: "special | Teamviewer :: favorite"
    block:

    - name: "special | Teamviewer :: favorite [1/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        state: read
      become: "{{ username }}"
      register: favorites
      changed_when: false

    - name: "special | Teamviewer :: favorite [2/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        value: "{{ favorites.value | list_append('com.teamviewer.TeamViewer.desktop') }}"
      become: "{{ username }}"

    when: wsl == "0"
    tags:
    - never
    - special
    - teamviewer

  - name: "special | VLC :: installation"
    apt:
      name: vlc
      state: latest
    when: wsl == "0"
    tags:
    - never
    - special
    - vlc

  - name: "special | VLC :: favorite"
    block:

    - name: "special | VLC :: favorite [1/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        state: read
      become: "{{ username }}"
      register: favorites
      changed_when: false

    - name: "special | VLC :: favorite [2/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        value: "{{ favorites.value | list_append('vlc.desktop') }}"
      become: "{{ username }}"

    when: wsl == "0"
    tags:
    - never
    - special
    - vlc

  - name: "special | OBS :: repository"
    apt_repository:
      repo: ppa:obsproject/obs-studio
      filename: obs-studio
      mode: 0644
    tags:
    - never
    - special
    - obs

  - name: "special | OBS :: installation"
    apt:
      name:
        - obs-studio
        - v4l2loopback-dkms
        - v4l2loopback-utils
      state: latest
    when: wsl == "0"
    tags:
    - never
    - special
    - obs

  - name: "special | OBS :: favorite"
    block:

    - name: "special | OBS :: favorite [1/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        state: read
      become: "{{ username }}"
      register: favorites
      changed_when: false

    - name: "special | OBS :: favorite [2/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        value: "{{ favorites.value | list_append('com.obsproject.Studio.desktop') }}"
      become: "{{ username }}"

    when: wsl == "0"
    tags:
    - never
    - special
    - obs

  - name: "special | Remmina :: installation"
    apt:
      name:
        - remmina
      state: latest
    when: wsl == "0"
    tags:
    - never
    - special
    - remmina

  - name: "special | Remmina :: favorite"
    block:

    - name: "special | Remmina :: favorite [1/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        state: read
      become: "{{ username }}"
      register: favorites
      changed_when: false

    - name: "special | OBS :: favorite [2/2]"
      dconf:
        key: /org/gnome/shell/favorite-apps
        value: "{{ favorites.value | list_append('org.remmina.Remmina.desktop') }}"
      become: "{{ username }}"

    when: wsl == "0"
    tags:
    - never
    - special
    - remmina

  - name: "kubernetes | sentry :: download"
    get_url:
      url: https://github.com/getsentry/sentry-cli/releases/download/{{ packages.sentry.version }}/sentry-cli-Linux-x86_64
      dest: /usr/local/bin/sentry-cli
      mode: 0755
#    when: k9s_version is failed or packages.k9s.version not in k9s_version.stdout_lines[0]
    tags:
    - kubernetes
    - sentry

  - name: "special | login background changer download"
    get_url:
      url: https://raw.githubusercontent.com/thiggy01/ubuntu-20.04-change-gdm-background/master/ubuntu-20.04-change-gdm-background
      dest: /usr/local/bin/ubuntu-20.04-change-gdm-background
      mode: 0755
    when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "20.04"
    tags:
    - never
    - special
    - login-background

  - name: "special | login background changer dependencies"
    apt:
      name: libglib2.0-dev-bin
      state: latest
    when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "20.04"
    tags:
    - fonts
    - ubuntu-mono
    tags:
    - never
    - special
    - login-background

  - name: "special | login background folder"
    file:
      path: /usr/local/share/backgrounds
      state: directory
      mode: 0755
    when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "20.04"
    tags:
    - never
    - special
    - login-background

  - name: "special | login background copy"
    copy:
      src: usr/local/share/backgrounds/{{ gdmbackground }}
      dest: /usr/local/share/backgrounds/{{ gdmbackground }}
      mode: "0644"
    when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "20.04"
    tags:
    - never
    - special
    - login-background

  - name: "special | login background changer apply"
    shell: echo "n" | /usr/local/bin/ubuntu-20.04-change-gdm-background /usr/local/share/backgrounds/{{ gdmbackground }}
    when: ansible_distribution == "Ubuntu" and ansible_distribution_version == "20.04"
    tags:
    - never
    - special
    - login-background

